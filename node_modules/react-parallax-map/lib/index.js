"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ParallaxMap = /** @class */ (function (_super) {
    __extends(ParallaxMap, _super);
    function ParallaxMap() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            x: 0,
            y: 0,
            map: []
        };
        return _this;
    }
    ParallaxMap.prototype.componentDidMount = function () {
        var _this = this;
        var map = this.convertMapForRadius(this.props.map);
        this.setState({
            map: map
        }, function () {
            _this.calculate();
        });
    };
    ParallaxMap.prototype.componentWillReceiveProps = function (nexrProps) {
        if (this.props.currentScroll !== nexrProps.currentScroll) {
            this.calculate();
        }
    };
    ParallaxMap.prototype.getPoints = function (radius, direction, angle, step) {
        var exit = [];
        var circlePoints = [];
        var directedPoints = [];
        var k = angle;
        for (var i = 0; i <= radius; i++) {
            k = k + step;
            circlePoints.push({
                x: Math.cos(k * Math.PI / 180) * radius,
                y: Math.sin(k * Math.PI / 180) * radius,
            });
        }
        if (direction === true) {
            for (var i = radius; i > 0; i--) {
                directedPoints.push(circlePoints[i]);
            }
        }
        else {
            directedPoints = circlePoints;
        }
        var ratio = {
            x: directedPoints[0].x,
            y: directedPoints[0].y,
        };
        for (var i = 0; i < radius; i++) {
            exit.push({
                x: directedPoints[i].x - ratio.x,
                y: directedPoints[i].y - ratio.y,
            });
        }
        return exit;
    };
    ParallaxMap.prototype.convertMapForRadius = function (map) {
        var _this = this;
        return map.map(function (mapItem) {
            if (mapItem.hasOwnProperty('radius') && mapItem.radius > 0) {
                return __assign({}, mapItem, {
                    points: _this.getPoints(mapItem.radius, mapItem.direction, mapItem.angle, mapItem.step)
                });
            }
            else {
                return __assign({}, mapItem, {
                    points: []
                });
            }
        });
    };
    ;
    ParallaxMap.prototype.calculate = function () {
        var _this = this;
        this.state.map.map(function (itemMap) {
            if (itemMap.start <= _this.props.currentScroll && itemMap.end >= _this.props.currentScroll) {
                var scrollArea = itemMap.end - itemMap.start - itemMap.radius;
                var xArea = itemMap.x - itemMap.beginX;
                var yArea = itemMap.y - itemMap.beginY;
                var howScroll = _this.props.currentScroll - itemMap.start; // How much pixels are scrolled for this range 
                if (howScroll >= scrollArea) {
                    var index = (howScroll - scrollArea).toFixed(0);
                    if (itemMap.points[index]) {
                        var goxRadius = itemMap.points[index].x + itemMap.x;
                        var goyRadius = itemMap.points[index].y + itemMap.y;
                        _this.setState({
                            x: goxRadius,
                            y: goyRadius
                        });
                    }
                }
                else {
                    var gox = 0;
                    var goy = 0;
                    if (scrollArea > xArea) {
                        gox = itemMap.beginX + howScroll / (scrollArea / xArea);
                        goy = itemMap.beginY + howScroll / (scrollArea / yArea);
                    }
                    else {
                        gox = itemMap.beginX + howScroll * (xArea / scrollArea);
                        goy = itemMap.beginY + howScroll * (yArea / scrollArea);
                    }
                    _this.setState({
                        x: gox,
                        y: goy
                    });
                }
            }
        });
    };
    ParallaxMap.prototype.render = function () {
        return (React.createElement("div", { style: {
                position: 'fixed',
                left: '0px',
                top: '0px',
                bottom: '0px',
                right: '0px',
                overflow: 'hidden',
                zIndex: this.props.layerZIndex
            } },
            React.createElement("div", { style: { transform: "translate(" + this.state.x + "px," + this.state.y + "px)" }, className: this.props.layerClassName }, this.props.children)));
    };
    ParallaxMap.defaultProps = {
        layerClassName: '',
        layerZIndex: 0
    };
    return ParallaxMap;
}(React.Component));
exports.ParallaxMap = ParallaxMap;
